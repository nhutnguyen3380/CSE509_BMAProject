# -*- coding: utf-8 -*-
"""diamond_search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YpyEIZE33aVM_BfJp4HUCvwkLUsFKY2d
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

def get_block(img, x, y, block_size):
    return img[y:y + block_size, x:x + block_size]

def calculate_sad(block1, block2):
    return np.sum(np.abs(block1 - block2))

def diamond_search(anchor_frame, target_frame, block_size, search_param):
    height, width = anchor_frame.shape
    motion_vectors = []

    for y in range(0, height, block_size):
        for x in range(0, width, block_size):
            best_match = (0, 0)
            min_sad = float('inf')
            anchor_block = get_block(anchor_frame, x, y, block_size)

            for dy in range(-search_param, search_param + 1):
                for dx in range(-search_param, search_param + 1):
                    ref_x, ref_y = x + dx, y + dy
                    if ref_x < 0 or ref_y < 0 or ref_x + block_size > width or ref_y + block_size > height:
                        continue

                    target_block = get_block(target_frame, ref_x, ref_y, block_size)
                    sad = calculate_sad(anchor_block, target_block)

                    if sad < min_sad:
                        min_sad = sad
                        best_match = (dx, dy)

            motion_vectors.append(((x + block_size // 2, y + block_size // 2), best_match))

    return motion_vectors

def draw_motion_vectors(image, motion_vectors, block_size):
    for (x, y), (dx, dy) in motion_vectors:
        end_point = (x + dx, y + dy)
        cv2.arrowedLine(image, (x, y), end_point, (0, 255, 0), 2, tipLength=0.4)
    return image

# Load your frames (grayscale)
anchor_frame = cv2.imread('nadia1.jpg', cv2.IMREAD_GRAYSCALE)
target_frame = cv2.imread('nadia2.jpg', cv2.IMREAD_GRAYSCALE)

# Block size and search parameter
block_size = 16
search_param = 7

# Calculate motion vectors
motion_vectors = diamond_search(anchor_frame, target_frame, block_size, search_param)

# Draw motion vectors
anchor_frame_color = cv2.cvtColor(anchor_frame, cv2.COLOR_GRAY2BGR)
output_frame = draw_motion_vectors(anchor_frame_color, motion_vectors, block_size)

# Display the result using Matplotlib
plt.figure(figsize=(10, 10))
plt.imshow(cv2.cvtColor(output_frame, cv2.COLOR_BGR2RGB))
plt.title("Motion Vectors")
plt.axis('off')
plt.show()